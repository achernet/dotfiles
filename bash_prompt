# Disable variable expansion in prompt strings.
shopt -u promptvars

# If the terminal supports ANSI color escape sequences, cache them for future
# use. It would be better to use tput here, but it's sadly absent on Cygwin,
# and probably other platforms, too. Anyway, we only use a few basic escape
# sequences, so this shouldn't hurt. Hopefully.
if [[ $TERM =~ ^(cygwin|linux|putty) ]]; then
  # The Linux virtual console and the Cygwin command prompt do not support
  # aixterm escape sequences for bright colors; however, they do treat ANSI
  # bold as bright, so we use that instead.
  _bash_prompt_term_reset=$'\033[m'

  _bash_prompt_term_red=$'\033[1;31m'
  _bash_prompt_term_green=$'\033[1;32m'
  _bash_prompt_term_orange=$_bash_prompt_term_reset$'\033[33m'
  _bash_prompt_term_blue=$'\033[1;34m'
  _bash_prompt_term_magenta=$'\033[1;35m'
  _bash_prompt_term_cyan=$'\033[1;36m'
  _bash_prompt_term_white=$'\033[1;37m'

  _bash_prompt_term_red=$'\033[1;31m'
  _bash_prompt_term_bold_white=$'\033[1;37m'
elif [[ $TERM =~ ^(rxvt|screen|xterm)-? ]]; then
  # All other terminal emulators we care about do support aixterm escapes.
  _bash_prompt_term_reset=$'\033[m'

  _bash_prompt_term_red=$'\033[91m'
  _bash_prompt_term_green=$'\033[92m'
  _bash_prompt_term_orange=$'\033[33m'
  _bash_prompt_term_blue=$'\033[94m'
  _bash_prompt_term_magenta=$'\033[95m'
  _bash_prompt_term_cyan=$'\033[96m'
  _bash_prompt_term_white=$'\033[97m'

  _bash_prompt_term_bold_red=$'\033[1;91m'
  _bash_prompt_term_bold_white=$'\033[1;97m'
fi

# Set a flag if the system supports ACPI and has a battery.
if type acpi >/dev/null 2>&1 && [[ $(acpi 2>/dev/null) =~ Battery ]]; then
  _bash_prompt_have_battery=1
fi

# Set a flag if the system has an uptime command. (Cygwin does not have one in
# its default configuration.)
if type uptime >/dev/null 2>&1; then
  _bash_prompt_have_uptime=1
fi

# Set a flag if the system has git installed.
if type git >/dev/null 2>&1; then
  _bash_prompt_have_git=1
fi

# Count the number of processors in the system and save it for use in CPU load
# calculation.
if [[ -f /proc/cpuinfo ]]; then
  # Processor detection currently relies on /proc/cpuinfo, so it only works
  # properly on Linux. Kudos to anyone who suggests a more portable way.
  _bash_prompt_cpu_count=$(grep -c '^processor[[:space:]]*:' /proc/cpuinfo)
else
  _bash_prompt_cpu_count=1
fi

preexec () {
  local cmd_line job cmd

  # Split the command line into multiple words.
  read -a cmd_line <<<"$1"

  # Find job specification.
  case "${cmd_line[0]}" in
    fg) [[ -n ${cmd_line[1]} ]] && job=${cmd_line[1]} || job=%% ;;
    %*) job=${cmd_line[0]} ;;
  esac

  # Get real command line.
  if [[ -n $job ]] && jobs "$job" 2>/dev/null; then
    # If we're bring a background job to the foreground, extract the job's
    # original command line.
    [[ $(jobs "$job") =~ [^\ ]+\ +[^\ ]+\ +(.*) ]] && cmd=${BASH_REMATCH[1]}
  else
    # Otherwise, recombine the command line we split earlier. Note that this
    # will normalize all whitespace down to a single space, just like a job
    # table entry's command line.
    cmd=${cmd_line[@]}
  fi

  # Set the terminal title.
  _bash_prompt_title "$cmd"
}

precmd () {
  # Reset prompt variables.
  _bash_prompt_col=0
  PS1=
  PS2='> '
  PS3='#? '
  PS4='+ '

  # Build the prompt.
  _bash_prompt_ps1_build_machine
  _bash_prompt_ps1_build_status
  _bash_prompt_ps1_build_directory
  _bash_prompt_ps1_append $'\n'
  _bash_prompt_ps1_build_symbol
  _bash_prompt_ps1_escape "$_bash_prompt_term_reset"
  _bash_prompt_ps1_escape "$(_bash_prompt_title)"
}

_bash_prompt_ps1_build_machine () {
  _bash_prompt_ps1_escape "$_bash_prompt_term_cyan"
  _bash_prompt_ps1_append "$USER"
  _bash_prompt_ps1_escape "$_bash_prompt_term_white"
  _bash_prompt_ps1_append @
  _bash_prompt_ps1_escape "$_bash_prompt_term_magenta"
  _bash_prompt_ps1_append "$(hostname -s)"
}

_bash_prompt_ps1_build_status () {
  _bash_prompt_ps1_escape "$_bash_prompt_term_white"
  _bash_prompt_ps1_build_jobs
  _bash_prompt_ps1_build_load
  _bash_prompt_ps1_build_battery
  _bash_prompt_ps1_build_git
}

_bash_prompt_ps1_build_jobs () {
  _bash_prompt_ps1_append ' J:'

  local count=$(jobs | wc -l)

  if (( count == 0 )); then
    _bash_prompt_ps1_escape "$_bash_prompt_term_green"
  elif (( count == 1 )); then
    _bash_prompt_ps1_escape "$_bash_prompt_term_orange"
  else
    _bash_prompt_ps1_escape "$_bash_prompt_term_red"
  fi

  _bash_prompt_ps1_append "$count"

  _bash_prompt_ps1_escape "$_bash_prompt_term_white"
}

_bash_prompt_ps1_build_load () {
  [[ -n $_bash_prompt_have_uptime ]] || return
  _bash_prompt_ps1_append ' L:'

  # Note that we *must* explicitly specify that load_int is in decimal;
  # otherwise, a leading zero will cause the load average to be interpreted as
  # octal instead, giving either an error or an incorrect result.
  [[ $(uptime) =~ (([[:digit:]]+)\.([[:digit:]]+)) ]] &&
      load=${BASH_REMATCH[1]} &&
      local load_int=$((10#${BASH_REMATCH[2]}${BASH_REMATCH[3]}))

  if (( load_int < _bash_prompt_cpu_count * 50 )); then
    _bash_prompt_ps1_escape "$_bash_prompt_term_green"
  elif (( load_int < _bash_prompt_cpu_count * 100 )); then
    _bash_prompt_ps1_escape "$_bash_prompt_term_orange"
  else
    _bash_prompt_ps1_escape "$_bash_prompt_term_red"
  fi

  _bash_prompt_ps1_append "$load"

  _bash_prompt_ps1_escape "$_bash_prompt_term_white"
}

_bash_prompt_ps1_build_battery () {
  [[ -n $_bash_prompt_have_battery ]] || return;
  _bash_prompt_ps1_append ' B:'

  local charges=($(acpi | sed 's/.*\ \([[:digit:]]\{1,\}\)%.*/\1/')) total

  for charge in "${charges[@]}"; do
    (( total += charge ))
  done
  local charge=$(( total / ${#charges[@]} ))

  if (( $charge > 90 )); then
    _bash_prompt_ps1_escape "$_bash_prompt_term_green"
  elif (( $charge > 45 )); then
    _bash_prompt_ps1_escape "$_bash_prompt_term_orange"
  else
    _bash_prompt_ps1_escape "$_bash_prompt_term_red"
  fi

  _bash_prompt_ps1_append "$charge%"

  _bash_prompt_ps1_escape "$_bash_prompt_term_white"
}

_bash_prompt_ps1_build_git() {
  [[ -n $_bash_prompt_have_git ]] || return;
  local status
  status=$(git status --porcelain -b 2>/dev/null) || return
  _bash_prompt_ps1_append ' G:'

  local OLDIFS=$IFS IFS=$'\n'
  local lines=($status) IFS=OLDIFS

  # The first line of the `git status` output contains information on the
  # current branch. Grab that info; then shift the first line off so the array
  # only contains lines pertaining to particular files.
  local branch_info=${lines[0]#\## }
  unset lines[0]

  # Parse the branch name out, ignoring remote information.
  local branch_name=${branch_info%%...*}
  local status_char

  for line in "${lines[@]}"; do
    if [[ ${line:0:2} == '??' ]]; then
      status_char=? # Untracked file present.
    else
      status_char=! # Tracked file modified.
      break
    fi
  done

  if [[ $branch_info =~ \[(ahead|behind)\ [[:digit:]]+\] ]]; then
    if [[ ${BASH_REMATCH[1]} == behind ]]; then
      _bash_prompt_ps1_escape "$_bash_prompt_term_red"
    else
      _bash_prompt_ps1_escape "$_bash_prompt_term_orange"
    fi
  else
    _bash_prompt_ps1_escape "$_bash_prompt_term_green"
  fi

  _bash_prompt_ps1_append "$branch_name$status_char"

  _bash_prompt_ps1_escape "$_bash_prompt_term_white"
}

_bash_prompt_ps1_build_directory () {
  _bash_prompt_ps1_escape "$_bash_prompt_term_blue"
  _bash_prompt_ps1_append ' '
  _bash_prompt_ps1_append \
      "$(_bash_prompt_truncate "${PWD/#$HOME/'~'}" \
      $(( COLUMNS - _bash_prompt_col)) left)"
}

_bash_prompt_ps1_build_symbol () {
  if (( UID == 0 )); then
    _bash_prompt_ps1_escape "$_bash_prompt_term_bold_red"
    _bash_prompt_ps1_append '# '
  else
    _bash_prompt_ps1_escape "$_bash_prompt_term_bold_white"
    _bash_prompt_ps1_append '$ '
  fi
}

# _bash_prompt_ps1_append STRING
#
# Append STRING to PS1. Backslashes will be doubled to ensure proper display.
# _bash_prompt_col will be updated as appropriate.
_bash_prompt_ps1_append () {
  local i; for (( i = 0; i < ${#1}; ++i )); do
    if [[ ${1:i:1} == $'\n' ]]; then
      _bash_prompt_col=0
    else
      (( ++_bash_prompt_col ))
    fi
  done

  PS1=$PS1${1//\\/\\\\}
}

# _bash_prompt_ps1_escape STRING
#
# Append STRING to PS1. Backslashes will be doubled to ensure proper display.
# \[ and \] markers will be added to mark the string as an escape sequence.
# _bash_prompt_col will not be updated.
_bash_prompt_ps1_escape () {
  PS1=$PS1\\[${1//\\/\\\\}\\]
}

# _bash_prompt_title [COMMAND]
#
# Output an escape sequence to set the terminal's title bar. Only works on
# xterm-like terminals. If COMMAND is not provided, the name of the currently-
# executing shell will be substituted.
_bash_prompt_title () {
  if [[ $TERM =~ ^(cygwin|rxvt|screen|xterm)-? ]]; then
    printf '\033]2;%s\a' "${1:-$0} (${PWD/#$HOME/'~'})"
  fi
}

# _bash_prompt_truncate STRING LENGTH [MODE]
#
# Output STRING truncated to LENGTH characters. MODE, which may be "right"
# (the default) or "left", controls which side of the string to truncate on.
_bash_prompt_truncate () {
  if (( ${#1} < $2 )); then
    printf %s "$1"
  elif [[ $3 == left ]]; then
    printf %s "...${1:3-$2}"
  else
    printf %s "${1:0:$2-3}..."
  fi
}
